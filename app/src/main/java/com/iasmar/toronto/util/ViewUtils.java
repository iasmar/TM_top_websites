package com.iasmar.toronto.util;

import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.support.annotation.ColorRes;
import android.support.annotation.IdRes;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.StringRes;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.content.ContextCompat;
import android.widget.TextView;
import android.widget.Toast;

import static com.iasmar.toronto.util.ObjectHelper.requireNonNull;

/**
 * Created by Asmar on 15/10/2017.
 * <p>
 * This Class provides utility methods to help Activities and Fragments load their UI.
 *
 * @author Asmar
 * @since 1.0
 */
public class ViewUtils {
    /**
     * Replace the current view to the new one.
     *
     * @param fragmentManager The Fragment manager.
     * @param fragment        The fragment.
     * @param frameId         The frame id.
     *                        The {@code fragment} is added to the container view with id {@code frameId}. The operation is
     *                        performed by the {@code fragmentManager}.
     * @param tag             Optional tag name for the fragment, to later retrieve the.
     * @param bundle          the arguments supplied when the fragment was instantiated.
     */
    public static void replaceFragment(@NonNull FragmentManager fragmentManager,
                                       @NonNull Fragment fragment, @IdRes int frameId, @Nullable String tag, @Nullable Bundle bundle) {
        fragmentManager = requireNonNull(fragmentManager, "fragmentManager cannot be null");
        fragment = requireNonNull(fragment, "fragment cannot be null");
        fragment.setArguments(bundle);
        FragmentTransaction transaction = fragmentManager.beginTransaction();
        transaction.replace(frameId, fragment, tag);
        boolean fragmentPopped = fragmentManager
                .popBackStackImmediate(tag, 0);
        if (!fragmentPopped && tag != null) {
            transaction.addToBackStack(tag);
        }
        transaction.commit();
    }

    /**
     * Get color by res id.
     *
     * @param context The context to use.  Usually your {@link android.app.Application}
     *                or {@link Activity} object.
     * @param resId   The desired resource identifier, as generated by the aapt
     *                tool. This integer encodes the package, type, and resource
     *                entry. The value 0 is an invalid identifier.
     * @return A single color value in the form 0xAARRGGBB.
     */
    public static int getColor(@NonNull Context context, @ColorRes int resId) {
        context = requireNonNull(context, "context cannot be null");
        return ContextCompat.getColor(context, resId);
    }

    /**
     * Get string by res id.
     *
     * @param context The context to use.  Usually your {@link android.app.Application}
     *                or {@link Activity} object.
     * @param resId   Resource id for the string.
     * @return The string data associated with the resource, stripped of styled
     * text information.
     */
    public static String getString(@NonNull Context context, @StringRes int resId) {
        context = requireNonNull(context, "context cannot be null");
        return context.getString(resId);
    }

    /**
     * Set text to text view by string res id.
     *
     * @param textView    The text view that will be set the text to.
     * @param stringResId The resource identifier of the string resource to be displayed.
     */
    public static void setText(@NonNull TextView textView, @StringRes int stringResId) {
        textView = requireNonNull(textView, "textView cannot be null");
        textView.setText(stringResId);
    }

    /**
     * Set text to text view by string.
     *
     * @param textView The text view that will be set the text to.
     * @param string   Text to be displayed.
     */
    public static void setText(@NonNull TextView textView, @NonNull String string) {
        textView = requireNonNull(textView, "textView cannot be null");
        string = requireNonNull(string, "string cannot be null");
        textView.setText(string);
    }

    /**
     * Make a standard toast that just contains a text view with the text from a resource.
     *
     * @param context  The context to use.  Usually your {@link android.app.Application}
     *                 or {@link Activity} object.
     * @param resId    The resource id of the string resource to use.  Can be formatted text.
     * @param duration How long to display the message.
     */
    public static void makeToast(@NonNull Context context, @StringRes int resId, int duration) {
        context = requireNonNull(context, "context cannot be null");
        Toast.makeText(context, resId, duration).show();
    }





}